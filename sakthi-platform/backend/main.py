"""
Sakthi Platform FastAPI Backend
Connects web interface to Sakthi NLP for Oracle to BigQuery conversion
"""

import os
import sys
from fastapi import FastAPI, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from dotenv import load_dotenv
import uvicorn

# Load environment
load_dotenv()

# Add paths for Sakthi imports
sys.path.append('.')
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Initialize FastAPI
app = FastAPI(title="Sakthi Platform API", version="1.0.0")

# Enable CORS for web interface
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {"message": "Sakthi Platform API - Oracle to BigQuery Converter"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "sakthi_engine": "ready"}

@app.post("/api/v1/convert/oracle-to-bigquery")
async def convert_oracle_to_bigquery(
    file: UploadFile = File(...),
    intent: str = Form(default="Convert Oracle schema to BigQuery")
):
    """Upload Oracle SQL and convert to BigQuery using Sakthi NLP"""
    
    try:
        # Read uploaded Oracle SQL
        if not file.filename.endswith('.sql'):
            return JSONResponse(
                status_code=400,
                content={"error": "Only .sql files supported"}
            )
        
        oracle_sql = (await file.read()).decode('utf-8')
        
        print(f"üìÅ Processing: {file.filename}")
        print(f"üó£Ô∏è Intent: {intent}")
        
        # Import Sakthi engine
        from core import SakthiEngine, OutputFormat
        
        # Initialize Sakthi
        sakthi = SakthiEngine()
        
        # Create NLP prompt for conversion
        nlp_prompt = f"""
        USER REQUEST: {intent}
        
        Convert this Oracle database schema to Google BigQuery format using intelligent analysis:
        
        CONVERSION REQUIREMENTS:
        1. Convert Oracle data types to BigQuery equivalents:
           - NUMBER ‚Üí INT64, FLOAT64, or NUMERIC 
           - VARCHAR2 ‚Üí STRING
           - DATE ‚Üí DATE
           - TIMESTAMP ‚Üí TIMESTAMP
           - CLOB ‚Üí STRING
        
        2. Handle constraints:
           - PRIMARY KEY ‚Üí Include in table definition
           - FOREIGN KEY ‚Üí Document as comments (BigQuery doesn't enforce)
           - CHECK constraints ‚Üí Convert to validation rules
           - UNIQUE ‚Üí Document as business rules
        
        3. Add BigQuery optimizations:
           - Suggest partitioning for large tables
           - Recommend clustering for performance
           - Include project.dataset placeholders
        
        ORACLE SCHEMA:
        {oracle_sql}
        
        Generate clean BigQuery DDL with explanatory comments.
        """
        
        # Process with Sakthi NLP
        result = sakthi.process(
            input_text=nlp_prompt,
            output_format=OutputFormat.SQL,
            context={
                'source': 'oracle',
                'target': 'bigquery',
                'filename': file.filename,
                'oracle_sql': oracle_sql  # Pass the original Oracle SQL for LLM conversion
            }
        )

        # Generate MCP config using the method we added to SakthiEngine
        mcp_config = sakthi.generate_mcp_config(f"{intent}: {oracle_sql}")

        # Save to bigquery-output folder
        import pathlib
        output_dir = pathlib.Path("bigquery-output")
        output_dir.mkdir(exist_ok=True)
        
        output_filename = f"{pathlib.Path(file.filename).stem}_bigquery.sql"
        output_path = output_dir / output_filename
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(f"-- Converted from Oracle: {file.filename}\n")
            f.write(f"-- User Intent: {intent}\n")
            f.write(f"-- Sakthi Confidence: {result.confidence:.2f}\n")
            f.write("-- Generated by Sakthi Platform\n\n")
            f.write(result.content)
        
        return {
            "success": True,
            "input_file": file.filename,
            "output_file": output_filename,
            "user_intent": intent,
            "bigquery_sql": result.content,
            "mcp_config": mcp_config,  # Added MCP config to response
            "confidence": result.confidence,
            "message": f"Successfully converted {file.filename} to BigQuery!"
        }
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return JSONResponse(
            status_code=500,
            content={
                "success": False,
                "error": str(e),
                "input_file": file.filename if file else "unknown"
            }
        )

if __name__ == "__main__":
    print("üöÄ Starting Sakthi Platform API...")
    print("üåê Web Interface: http://localhost:3000")
    print("üì° API Server: http://localhost:8000")
    
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)